
Deprecated: The each() function is deprecated. This message will be suppressed on further calls in C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php on line 54

Call Stack:
    0.0040     742584   1. {main}() C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php:0
    0.0049     761384   2. CodeFormatter->formatCode($source = '<?php\r\n\r\n# --------------------------------------------------------------------------\r\n\r\ndeclare( strict_types = 1 );\r\n\r\nnamespace App\\Libraries\\Red2Horse\\Facade\\Auth;\r\n\r\nuse App\\Libraries\\Red2Horse\\Mixins\\TraitSingleton;\r\n\r\n# --------------------------------------------------------------------------\r\n\r\nclass Authorization\r\n{\r\n\r\n\tuse TraitSingleton;\r\n\r\n\tprotected Config $config;\r\n\r\n\tprotected Authentication $authentication;\r\n\r\n\t/**\r\n\t * Current session user role\r\n\t */\r\n\tprotected array $sessionRole;\r\n\r\n\t/**'...) C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php:1736
    0.0053     769576   3. AddMissingCurlyBraces->format($source = '<?php\r\n\r\n# --------------------------------------------------------------------------\r\n\r\ndeclare( strict_types = 1 );\r\n\r\nnamespace App\\Libraries\\Red2Horse\\Facade\\Auth;\r\n\r\nuse App\\Libraries\\Red2Horse\\Mixins\\TraitSingleton;\r\n\r\n# --------------------------------------------------------------------------\r\n\r\nclass Authorization\r\n{\r\n\r\n\tuse TraitSingleton;\r\n\r\n\tprotected Config $config;\r\n\r\n\tprotected Authentication $authentication;\r\n\r\n\t/**\r\n\t * Current session user role\r\n\t */\r\n\tprotected array $sessionRole;\r\n\r\n\t/**'...) C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php:326
    0.0053     769576   4. AddMissingCurlyBraces->addBraces($source = '<?php\r\n\r\n# --------------------------------------------------------------------------\r\n\r\ndeclare( strict_types = 1 );\r\n\r\nnamespace App\\Libraries\\Red2Horse\\Facade\\Auth;\r\n\r\nuse App\\Libraries\\Red2Horse\\Mixins\\TraitSingleton;\r\n\r\n# --------------------------------------------------------------------------\r\n\r\nclass Authorization\r\n{\r\n\r\n\tuse TraitSingleton;\r\n\r\n\tprotected Config $config;\r\n\r\n\tprotected Authentication $authentication;\r\n\r\n\t/**\r\n\t * Current session user role\r\n\t */\r\n\tprotected array $sessionRole;\r\n\r\n\t/**'...) C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php:41
    0.0063    1262120   5. each($arr = [0 => [0 => 382, 1 => '<?php\r\n', 2 => 1], 1 => [0 => 385, 1 => '\r\n', 2 => 2], 2 => [0 => 380, 1 => '# --------------------------------------------------------------------------\r\n', 2 => 3], 3 => [0 => 385, 1 => '\r\n', 2 => 4], 4 => [0 => 332, 1 => 'declare', 2 => 5], 5 => '(', 6 => [0 => 385, 1 => ' ', 2 => 5], 7 => [0 => 311, 1 => 'strict_types', 2 => 5], 8 => [0 => 385, 1 => ' ', 2 => 5], 9 => '=', 10 => [0 => 385, 1 => ' ', 2 => 5], 11 => [0 => 309, 1 => '1', 2 => 5], 12 => [0 => 385, 1 => ' ', 2 => 5], 13 => ')', 14 => ';', 15 => [0 => 385, 1 => '\r\n\r\n', 2 => 5], 16 => [0 => 391, 1 => 'namespace', 2 => 7], 17 => [0 => 385, 1 => ' ', 2 => 7], 18 => [0 => 311, 1 => 'App', 2 => 7], 19 => [0 => 393, 1 => '\\', 2 => 7], 20 => [0 => 311, 1 => 'Libraries', 2 => 7], 21 => [0 => 393, 1 => '\\', 2 => 7], 22 => [0 => 311, 1 => 'Red2Horse', 2 => 7], 23 => [0 => 393, 1 => '\\', 2 => 7], 24 => [0 => 311, 1 => 'Facade', 2 => 7], 25 => [0 => 393, 1 => '\\', 2 => 7], 26 => [0 => 311, 1 => 'Auth', 2 => 7], 27 => ';', 28 => [0 => 385, 1 => '\r\n\r\n', 2 => 7], 29 => [0 => 350, 1 => 'use', 2 => 9], 30 => [0 => 385, 1 => ' ', 2 => 9], 31 => [0 => 311, 1 => 'App', 2 => 9], 32 => [0 => 393, 1 => '\\', 2 => 9], 33 => [0 => 311, 1 => 'Libraries', 2 => 9], 34 => [0 => 393, 1 => '\\', 2 => 9], 35 => [0 => 311, 1 => 'Red2Horse', 2 => 9], 36 => [0 => 393, 1 => '\\', 2 => 9], 37 => [0 => 311, 1 => 'Mixins', 2 => 9], 38 => [0 => 393, 1 => '\\', 2 => 9], 39 => [0 => 311, 1 => 'TraitSingleton', 2 => 9], 40 => ';', 41 => [0 => 385, 1 => '\r\n\r\n', 2 => 9], 42 => [0 => 380, 1 => '# --------------------------------------------------------------------------\r\n', 2 => 11], 43 => [0 => 385, 1 => '\r\n', 2 => 12], 44 => [0 => 364, 1 => 'class', 2 => 13], 45 => [0 => 385, 1 => ' ', 2 => 13], 46 => [0 => 311, 1 => 'Authorization', 2 => 13], 47 => [0 => 385, 1 => '\r\n', 2 => 13], 48 => '{', 49 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 14], 50 => [0 => 350, 1 => 'use', 2 => 16], 51 => [0 => 385, 1 => ' ', 2 => 16], 52 => [0 => 311, 1 => 'TraitSingleton', 2 => 16], 53 => ';', 54 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 16], 55 => [0 => 357, 1 => 'protected', 2 => 18], 56 => [0 => 385, 1 => ' ', 2 => 18], 57 => [0 => 311, 1 => 'Config', 2 => 18], 58 => [0 => 385, 1 => ' ', 2 => 18], 59 => [0 => 312, 1 => '$config', 2 => 18], 60 => ';', 61 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 18], 62 => [0 => 357, 1 => 'protected', 2 => 20], 63 => [0 => 385, 1 => ' ', 2 => 20], 64 => [0 => 311, 1 => 'Authentication', 2 => 20], 65 => [0 => 385, 1 => ' ', 2 => 20], 66 => [0 => 312, 1 => '$authentication', 2 => 20], 67 => ';', 68 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 20], 69 => [0 => 381, 1 => '/**\r\n\t * Current session user role\r\n\t */', 2 => 22], 70 => [0 => 385, 1 => '\r\n\t', 2 => 24], 71 => [0 => 357, 1 => 'protected', 2 => 25], 72 => [0 => 385, 1 => ' ', 2 => 25], 73 => [0 => 371, 1 => 'array', 2 => 25], 74 => [0 => 385, 1 => ' ', 2 => 25], 75 => [0 => 312, 1 => '$sessionRole', 2 => 25], 76 => ';', 77 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 25], 78 => [0 => 381, 1 => '/**\r\n\t * Current session user permission\r\n\t */', 2 => 27], 79 => [0 => 385, 1 => '\r\n\t', 2 => 29], 80 => [0 => 357, 1 => 'protected', 2 => 30], 81 => [0 => 385, 1 => ' ', 2 => 30], 82 => [0 => 371, 1 => 'array', 2 => 30], 83 => [0 => 385, 1 => ' ', 2 => 30], 84 => [0 => 312, 1 => '$sessionPermission', 2 => 30], 85 => ';', 86 => [0 => 385, 1 => '\r\n\r\n\t', 2 => 30], 87 => [0 => 380, 1 => '# ------------------------------------------------------------------------\r\n', 2 => 32], 88 => [0 => 385, 1 => '\r\n\t', 2 => 33], 89 => [0 => 358, 1 => 'public', 2 => 34], 90 => [0 => 385, 1 => ' ', 2 => 34], 91 => [0 => 342, 1 => 'function', 2 => 34], 92 => [0 => 385, 1 => ' ', 2 => 34], 93 => [0 => 311, 1 => '__construct', 2 => 34], 94 => [0 => 385, 1 => ' ', 2 => 34], 95 => '(', 96 => [0 => 385, 1 => ' ', 2 => 34], 97 => [0 => 311, 1 => 'Config', 2 => 34], 98 => [0 => 385, 1 => ' ', 2 => 34], 99 => [0 => 312, 1 => '$config', 2 => 34], 100 => [0 => 385, 1 => ' ', 2 => 34], 101 => ')', 102 => [0 => 385, 1 => '\r\n\t', 2 => 34], 103 => '{', 104 => [0 => 385, 1 => '\r\n\t\t', 2 => 35], 105 => [0 => 312, 1 => '$this', 2 => 36], 106 => [0 => 369, 1 => '->', 2 => 36], 107 => [0 => 311, 1 => 'config', 2 => 36], 108 => [0 => 385, 1 => ' ', 2 => 36], 109 => '=', 110 => [0 => 385, 1 => ' ', 2 => 36], 111 => [0 => 312, 1 => '$config', 2 => 36], 112 => ';', 113 => [0 => 385, 1 => '\r\n\t\t', 2 => 36], 114 => [0 => 312, 1 => '$this', 2 => 37], 115 => [0 => 369, 1 => '->', 2 => 37], 116 => [0 => 311, 1 => 'authentication', 2 => 37], 117 => [0 => 385, 1 => ' ', 2 => 37], 118 => '=', 119 => [0 => 385, 1 => ' ', 2 => 37], 120 => [0 => 311, 1 => 'Authentication', 2 => 37], 121 => [0 => 390, 1 => '::', 2 => 37], 122 => [0 => 311, 1 => 'getInstance', 2 => 37], 123 => '(', 124 => [0 => 385, 1 => ' ', 2 => 37], 125 => [0 => 312, 1 => '$this', 2 => 37], 126 => [0 => 369, 1 => '->', 2 => 37], 127 => [0 => 311, 1 => 'config', 2 => 37], ...]) C:\Program Files\Sublime 4\Data\Packages\PHPTools\php.tools\codeFormatter.php:54

<?php

# --------------------------------------------------------------------------

declare(strict_types = 1);

namespace Red2Horse\Facade\Auth;

use Red2Horse\Mixins\TraitSingleton;

# --------------------------------------------------------------------------

class Authorization {

	use TraitSingleton;

	protected Config $config;

	protected Authentication $authentication;

	/**
	 * Current session user role
	 */
	protected array $sessionRole;

	/**
	 * Current session user permission
	 */
	protected array $sessionPermission;

	# ------------------------------------------------------------------------

	public function __construct(Config $config) {
		$this->config         = $config;
		$this->authentication = Authentication::getInstance($this->config);

		$this->sessionRole       = $this->getSessionData('role');
		$this->sessionPermission = $this->getSessionData('permission');
	}

	# ------------------------------------------------------------------------

	/**
	 * @param array $filters
	 * @param bool $onlyRole when false will be do except
	 * @return bool
	 */
	public function withRole(array $filters, $only = 'gdg'):bool {
		if ($this->isInvalid()) {
			return false;
		}

		if ($this->isAdmin()) {
			// dd('admin');
			return true;
		}
		// dd($only);
		$isValid = false;

		$checked = [];

		foreach ($filters as $filter) {
			$filter = str_replace(' ', '', ( string ) $filter);

			if (in_array($filter, $checked, true)) {
				continue;
			}

			// if ( $filter[ 0 ] === '!' )
			// {
			// 	# saved not, check them for all other filter ?
			// 	$filterExcept = str_replace( [ '!', 'NOT' ], '', $filter );
			// 	$checked[] = $filterExcept;

			// 	continue;
			// }

			if (in_array($filter, $this->sessionRole, true)) {
				$checked[] = $filter;

				$isValid = !$isValid;
				break;
			}
		}

		return $isValid;
	}

	# ------------------------------------------------------------------------

	/**
	 * The first check the current user session, * the next will be $data parameter
	 * @param array $data case empty array ( [] ) = 1st group = administrator
	 * @param bool $or when $or is false, will be check === permission, true check in_array
	 * @return boolean
	 */
	public function withPermission(array $filters, bool $or = true):bool {
		if ($this->isInvalid()) {
			return false;
		}

		if ($this->isAdmin()) {
			return true;
		}

		if (empty($filters)) {
			return false;
		}

		$routeGates = $this->config->userRouteGates;

		$inCfPerm = fn($filter):bool => in_array(
			$filter, $routeGates, true
		);

		$inUserPerm = fn($filter):bool => in_array(
			$filter, $this->sessionPermission, true
		);

		$boolVar = true !== $or;

		if ($or) {
			foreach ($filters as $filter) {
				if (true === $inCfPerm($filter) && true === $inUserPerm($filter)) {
					$boolVar = true;
					break;
				}
			}
		} else {
			foreach ($filters as $filter) {
				if (false === $inCfPerm($filter) || false === $inUserPerm($filter)) {
					$boolVar = false;
					break;
				}
			}
		}

		return $boolVar;
	}

	# ------------------------------------------------------------------------

	/**
	 * Use it late, because current CI4 not support filter on RestAPI method
	 * @example Gate.Permission: extension.r,extension.c
	 */
	public function withGroup(array $dataFilters):bool {
		if ($this->isInvalid()) {
			return false;
		}

		if ($this->isAdmin()) {
			return true;
		}

		$boolVar = true;

		foreach ($dataFilters as $gate => $filterPem) {
			if (!is_array($filterPem) || empty($filterPem)) {
				$errStr = 'The current gate of user-permission cannot be empty !';
				throw new \Exception($errStr, 403);
			}

			$checkGate = $this->isValidPerm(
				( string ) $gate,
				$filterPem,
				$this->sessionPermission
			);

			if (false === $checkGate) {
				echo '<pre>';
				die(var_dump([
							'gate'       => $gate,
							'filterPem'  => $filterPem,
							'sessionPem' => $this->sessionPermission
						]));
				$boolVar = false;
				break;
			}

			/**
			 * Session store pattern
			 */
			$session = [
				# --- Or 'all'
				'permission' => [
					'page'      => [
						'r', 'c', 'u'
					],
					'user' => [
						'c', 'd'
					]
				]
			];
		}

		return $boolVar;
	}

	# ------------------------------------------------------------------------

	private function isValidPerm(
		string $gate,
		array $filterPem,
		array $sessionPem
	):bool {
		$config = $this->config;

		$hasConfig  = in_array($gate, $config->userRouteGates, true);
		$hasSession = array_key_exists($gate, $sessionPem);
		if (false === $hasConfig || false === $hasSession) {
			return false;
		}

		$currentSessionGate = $sessionPem[$gate]??[];
		if (in_array($config->superAdminPermission, $currentSessionGate, true)) {
			return true;
		}

		$hasFilterDiff  = array_diff($filterPem, $config->sessionPermission);
		$hasSessionDiff = array_diff($currentSessionGate, $config->sessionPermission);

		if (empty($hasFilterDiff) && empty($hasSessionDiff)) {
			return empty(array_diff($filterPem, $currentSessionGate));
		}

		return false;
	}

	private function getSessionData($key = 'permission'):array
	{
		$sessionData = ( array ) $this->authentication->getUserdata($key);

		return empty($sessionData)?[]:$sessionData;
	}

	private function isAdmin():bool {
		$isAdmin = ($this->sessionRole === $this->config->adminRole) ||
		isset($this->sessionPermission[0]) &&
		($this->sessionPermission[0] === $this->config->adminGate);

		return ( bool ) $isAdmin;
	}

	private function isInvalid():bool {
		return empty($this->sessionRole[0]) || empty($this->sessionPermission[0]);
	}
}